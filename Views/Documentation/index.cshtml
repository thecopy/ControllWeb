@{
    Layout = "../_layout.cshtml";
}
      <div class="row-fluid" style="margin-top: 80px">
        <div class="span3">
          <div class="well nav sidebar-nav affix" style="width:180px">
            <ul class="nav nav-list">
              <li class="active"><a href="#">Quick Start</a></li>
              <li class="nav-header">Plugins</li>
              <li><a href="#tiny-example">Tiny Example</a></li>
              <li><a href="#">Concepts</a></li>
              <li><a href="#concepts">Coding Plugins</a></li>
              <li class="nav-header">Controll Serivce</li>
              <li><a href="#">Deploying</a></li>
              <li><a href="#">Communications Model</a></li>
              <li class="nav-header">Reference</li>
              <li><a href="#">IPluginContext</a></li>
              <li><a href="#">IControllPlugin</a></li>
              <li><a href="#">ParameterDescriptor</a></li>
              <li class="nav-header">Legal stuff</li>
              <li><a href="#">License</a></li>
            </ul>
          </div>
            <!--/.well -->
        </div>
          <!--/span-->
          <div class="span9">
              <div class="hero-unit">
                  <h1>Quick Start</h1>
                  <p></p>
                  <ol>
                      <li>Download the <a href="#">zombie</a> (11 KB)</li>
                      <li>Download a simple <a href="#">SDK</a></li>
                      <li>Write your plugin (<a href="@Url.Content("~/Help/TinyPluginExample")">Tiny Example</a>)</li>
                      <li>Compile and copy your .dll-file to the zombie folder as <span class="label">anything.plugin.dll</span></li>
                      <li><a href="@Url.Content("~/Account/Register")">Sign up</a> or <a href="#">deploy your own</a> Controll service</li>
                      <li>Start your zombie executable and enter:<br />

                          <ul>
                              <li>
                                  <pre>>> register username password this-zombie-name</pre>
                              </li>
                              <li>
                                  <pre>>> sync</pre>
                              </li>
                          </ul>
                      </li>
                  </ol>
                  <p>
                      There! Now your zombie is ready to execute your plugin from other devices!
                  </p>
                  <h2>What devices can i use?</h2>
                  <p>
                      At the moment you'll have to have .NET runtime installed to use Controll. A prototype client for iOS 
                      have been created and it works (sort of). This means that at the moment you are limited to Windows or by using Mono. Feel free to
                      write your own clients!
                  </p>
                  <p><a href="#" class="btn btn-primary btn-large">Learn More!</a></p>
              </div>
              <div class="row-fluid">
                  <div class="span4">
                      <h2>Controll SDK</h2>
                      <p>
                          You will need the SDK to develop new plugin. The SDK contains some common models that is shared through out the
                          Controll framework
                      </p>
                      <p><a class="btn" href="#">View Details</a></p>
                  </div>
                  <!--/span-->
                  <div class="span4">
                      <h2>Binaries</h2>
                      <p>
                          What would the world be without binaries? Who has time to compile from source and end up in dependency hell?
                          Download pre-compiled binaries today!<br />
                          <small>Requires Microsoft .NET Framework</small>
                      </p>
                      <p><a class="btn" href="#">View details</a></p>
                  </div>
                  <!--/span-->
                  <div class="span4">
                      <h2>Source Code</h2>
                      <p>Looking to contribute? The source code for Controll is available at GitHub, head over there and get started!</p>
                      <p><a class="btn" href="https://github.com/thecopy/Controll">Go to GitHub</a></p>
                  </div>
                  <!--/span-->
              </div>
              <section id="plugins">
                  <div class="page-header"><h1>Plugins</h1></div>
                  <h2 id="tiny-example">Tiny Example</h2>
                  <p>
                      This is an example of a tiny working plugin which does nothing besides to sleep for 5 seconds before
                      it finishes.
                  </p>
                  <pre class="prettyprint lang-java" style="padding-left: 1em">
using System;
using System.Threading;
using Controll.Common;

public class SampleActivity : IControllPlugin
{
    public void Execute(IPluginContext context)
    {
        context.Started();
        Thread.Sleep(5000);
        context.Finish("Finished :)");
    }

    public ActivityViewModel ViewModel { get { return _viewModel; } }
    private readonly ActivityViewModel _viewModel = new ActivityViewModel
        {
            Key = Guid.Parse("1925C00C-7BD8-4D5D-BD34-78CD1D7D0EA6"),
            Name = "Sample Activity",
            Description = "An activity which does nothing",
            CreatorName = "thecopy",
            LastUpdated = DateTime.Parse("2013-04-25"),
            Version = new Version(1,0,0,0)
        };
}
                  </pre>
                  
                  <div class="alert alert-info alert-block">
                      <h4>Heads up!</h4>
                      Although this plugin works fine by just invoking it since it doesnt use any parameters, if you want
                      to have an awesome dynamically created interface for it, you will have to write a few more lines!
                  </div>

                  <h2 id="concepts">Concepts</h2>
                  <div class="alert alert-block">
                      <h4>Warning!</h4>
                      Some of what which is described in this section have not yet been implemented! But you can help by
                      <a href="@Url.Content("~/Contribute/")">contributing</a>!
                  </div>
                  <p>
                      When coding a plugin there isn't really that much you'll have to know! You can do pretty much anything
                      you would be able to do if you were writing your own stand alone application. The difference is that all
                      the input and output from and to the user will be going through the Controll service. And for that you have
                      some fundamental concepts to rely on.
                  </p>
                  <p>
                      The method which gets executed when your plugin is invoked from the zombie is
                      <code class="prettyprint">void IControllPlugin.Execute(IPluginContext)</code>. As you can see from the 
                      method signature you have access to something called a <strong>plugin context</strong>. By using this context-object
                      you can communicate with the caller before, during and after execution, and also send error messages. But the most
                      important property of the context-object for sure is the parameter dictionary. This property will contain
                      all the parameters passed to the plugin which will be needed for execution.
                  </p>
                  <h4>Can my plugin .dll contain many more than one plugin?</h4>
                  <p>
                      <strong>Yes!</strong> Think of it like this:<br/>
                      The <span class="label">.dll-file</span> contains <span class="label">Activities</span> which contains <span class="label">Commands</span>. <br/>
                      An analogy would be:<br/>
                      The <span class="label">Namespace</span> contains <span class="label">Classes</span> which contains <span class="label">Methods</span>.
                  </p>
                  <p>
                      There are two types of commands: Normal commands and <i>intermidiate commands</i>. We will get to that later, for now lets focus on normal stuff!
                  </p>
                  <h4>Normal Commands</h4>
                  <p>
                      All normal commands will be exposed to the Contoll serivce by the zombie when synchronizing it's plugin-list.
                  </p>
                  <p>
                      Lets say you have an activity in your plugin named <i>HelloWorld</i> which have one command and it requires one parameter. It
                      should be the callers name. How is this interfaced to the client? And how can you control it? Well, that is what a <b>Parameter
                      Descriptor</b> is for!
                  </p>
                  <h4>The Parameter Descriptor</h4>
                  <p>
                      A Parameter Descriptor contains metadata for one of the parameters needed for a command to be executed. The metadata
                      controlls if your parameter should be interfaced like a textbox, a dropdown or a checkbox. It also contains the label and
                      a description (optional).
                  </p>
                  <p>So your parameter descriptors for the HelloWorld command would be just one with the properties:</p>
                  <ul>
                      <li>Label: "Name"</li>
                      <li>Type: Textbox</li>
                      <li>Description: "Please enter Your name"</li>
                  </ul>
                  <h4>Alright! What about them intermidiate commands?</h4>
                  <p>
                      The <i>intermidiate commands</i> are commands that are not exposed to the caller but are a kind of
                      "return value" from another command. Lets use the simple <i>HelloWorld</i> command from above.
                  </p>
                  <p>What if you want to ask the caller, by his or her name, what year of time it is? You will want to return a list of
                      possible values (spring, summer, autumn and winter) and let the caller choose from these. This is what <b>intermidiate commands</b>
                      are for! And each of the values have their own metadata which contains information about them and which commands will be called
                      when activated.
                  </p>
                  
                  <h2>Coding Plugins</h2>
                  <p>Let create our activity HelloWorld and learn by doing! First we start with the bare minimum:</p>
                  <pre class="prettyprint lang-java">
using System;
using Controll.Common;

public class SampleActivity : IControllPlugin
{
    public void Execute(IPluginContext context)
    {
        context.Started();
        context.Finish("Hello world!");
    }

    public ActivityViewModel ViewModel { get { return _viewModel; } }
    private readonly ActivityViewModel _viewModel = new ActivityViewModel
        {
            Key = Guid.Parse("1115C00C-7BD1-4D5D-BD34-78CD1D7D0222"),
            Name = "Hello World",
            Description = "An activity which does nothing",
            CreatorName = "some smart guy",
            LastUpdated = DateTime.Parse("2013-04-25"),
            Version = new Version(1,0,0,0)
        };
}

                  </pre>
                  <p>
                      Lets go through this! <br/>
                      First we call <code class="prettyprint">context.Started();</code>, this only is to message the Controll serivce that
                      the activity have been invocated.<br />
                      We when right after call <code class="prettyprint">context.Finish("Hello world!");</code> which is to message the Controll
                      service that the execution of the activity is finished and send back any a friendly message!
                  </p>
                  <p>
                      That wasn't so complex, was it? So what about all that ViewModel-stuff below? Well, if you read it through it is only a
                      class which describes the activity and contains some information about who the creator was, the activity name and a description
                      and some more stuff which is obvious from the property names. 
                  </p>
                  <h4>Lets ask the caller for their name!</h4>
                  <p>
                      Alright! First we must declare in the ViewModel that we have a command that needs a parameter containing the callers name! Lets add
                      this below <code class="prettyprint">Version = new Version(1,0,0,0)</code> in the ViewModel (remember to 
                      add <code class="prettyprint">,</code> after that line):
                  </p>
                  <pre class="prettyprint lang-java">
Commands = new List&lt;ActivityCommandViewModel&gt;
{
    new ActivityCommandViewModel
        {
            Label = "Say hello",
            Name  = "say-hello",
            ParameterDescriptors = new List&lt;ParameterDescriptorViewModel&gt;
                {
                    new ParameterDescriptorViewModel
                        {
                            Label = "Your Name",
                            Description = "Please enter your name.",
                            Name  = "name"
                        }
                }
        }
}
</pre>
                  <p>
                      Don't be scared! It isn't <i>that</i> much! This code sets the <code class="prettyprint">Commands</code> property on the ViewModel to a
                      list which conaints one command. That commands name is "Say Hello" and it has one parameter with the label "Your Name". It would be interfaced
                      something like this:
                  </p>
                  <form class="well">
                      <fieldset>
                          <legend>Say hello</legend>
                          <label>Your name</label>
                          <input type="text" placeholder="">
                          <span class="help-block">Please enter your name.</span>
                          <button type="submit" class="btn btn-primary" >Ok</button>
                      </fieldset>
                  </form>
                  <p>
                      Cool, huh!? Alright, so now we want the activity to process the parameter, replace the current code inside 
                      the <code class="prettyprint">Execute</code> method with this:
                  </p>
                  <pre class="prettyprint lang-java">
public void Execute(IPluginContext context)
{
    context.Started();

    string callerName = context.Parameters["name"];
    context.Finish("Hello " + callerName);
}
</pre>
                  <p>
                      That's it! If you would execute that activity with the parameter <code class="prettyprint">name = "foo"</code> you would be
                      returned "Hello foo!".
                  </p>
                  <h4>Implement an intermidiate command</h4>
                  <div class="alert alert-info">
                    The current version of Controll have not yet implemented this type of command. It only exist like a prototype in developement.
                  </div>

              </section>
          </div>
          <!--/span-->
      </div>
<!--/row-->

<hr />

      <footer>
        <p></p>
      </footer>
